circuit Cache :
  module tag_cache :
    input clock : Clock
    input reset : Reset
    output io : { flip cache_req : { index : UInt<3>, we : UInt<1>}, flip tag_write : { valid : UInt<1>, dirty : UInt<1>, visit : UInt<8>, tag : UInt<54>}, tag_read : { valid : UInt<1>, dirty : UInt<1>, visit : UInt<8>, tag : UInt<54>}}

    smem tag_mem : { valid : UInt<1>, dirty : UInt<1>, visit : UInt<8>, tag : UInt<54>} [8] @[test.scala 84:34]
    infer mport io_tag_read_MPORT = tag_mem[io.cache_req.index], clock @[test.scala 85:31]
    io.tag_read.tag <= io_tag_read_MPORT.tag @[test.scala 85:21]
    io.tag_read.visit <= io_tag_read_MPORT.visit @[test.scala 85:21]
    io.tag_read.dirty <= io_tag_read_MPORT.dirty @[test.scala 85:21]
    io.tag_read.valid <= io_tag_read_MPORT.valid @[test.scala 85:21]
    when io.cache_req.we : @[test.scala 86:30]
      infer mport MPORT = tag_mem[io.cache_req.index], clock @[test.scala 87:24]
      MPORT.tag <= io.tag_write.tag @[test.scala 87:45]
      MPORT.visit <= io.tag_write.visit @[test.scala 87:45]
      MPORT.dirty <= io.tag_write.dirty @[test.scala 87:45]
      MPORT.valid <= io.tag_write.valid @[test.scala 87:45]

  module tag_cache_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip cache_req : { index : UInt<3>, we : UInt<1>}, flip tag_write : { valid : UInt<1>, dirty : UInt<1>, visit : UInt<8>, tag : UInt<54>}, tag_read : { valid : UInt<1>, dirty : UInt<1>, visit : UInt<8>, tag : UInt<54>}}

    smem tag_mem : { valid : UInt<1>, dirty : UInt<1>, visit : UInt<8>, tag : UInt<54>} [8] @[test.scala 84:34]
    infer mport io_tag_read_MPORT = tag_mem[io.cache_req.index], clock @[test.scala 85:31]
    io.tag_read.tag <= io_tag_read_MPORT.tag @[test.scala 85:21]
    io.tag_read.visit <= io_tag_read_MPORT.visit @[test.scala 85:21]
    io.tag_read.dirty <= io_tag_read_MPORT.dirty @[test.scala 85:21]
    io.tag_read.valid <= io_tag_read_MPORT.valid @[test.scala 85:21]
    when io.cache_req.we : @[test.scala 86:30]
      infer mport MPORT = tag_mem[io.cache_req.index], clock @[test.scala 87:24]
      MPORT.tag <= io.tag_write.tag @[test.scala 87:45]
      MPORT.visit <= io.tag_write.visit @[test.scala 87:45]
      MPORT.dirty <= io.tag_write.dirty @[test.scala 87:45]
      MPORT.valid <= io.tag_write.valid @[test.scala 87:45]

  module tag_cache_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip cache_req : { index : UInt<3>, we : UInt<1>}, flip tag_write : { valid : UInt<1>, dirty : UInt<1>, visit : UInt<8>, tag : UInt<54>}, tag_read : { valid : UInt<1>, dirty : UInt<1>, visit : UInt<8>, tag : UInt<54>}}

    smem tag_mem : { valid : UInt<1>, dirty : UInt<1>, visit : UInt<8>, tag : UInt<54>} [8] @[test.scala 84:34]
    infer mport io_tag_read_MPORT = tag_mem[io.cache_req.index], clock @[test.scala 85:31]
    io.tag_read.tag <= io_tag_read_MPORT.tag @[test.scala 85:21]
    io.tag_read.visit <= io_tag_read_MPORT.visit @[test.scala 85:21]
    io.tag_read.dirty <= io_tag_read_MPORT.dirty @[test.scala 85:21]
    io.tag_read.valid <= io_tag_read_MPORT.valid @[test.scala 85:21]
    when io.cache_req.we : @[test.scala 86:30]
      infer mport MPORT = tag_mem[io.cache_req.index], clock @[test.scala 87:24]
      MPORT.tag <= io.tag_write.tag @[test.scala 87:45]
      MPORT.visit <= io.tag_write.visit @[test.scala 87:45]
      MPORT.dirty <= io.tag_write.dirty @[test.scala 87:45]
      MPORT.valid <= io.tag_write.valid @[test.scala 87:45]

  module tag_cache_3 :
    input clock : Clock
    input reset : Reset
    output io : { flip cache_req : { index : UInt<3>, we : UInt<1>}, flip tag_write : { valid : UInt<1>, dirty : UInt<1>, visit : UInt<8>, tag : UInt<54>}, tag_read : { valid : UInt<1>, dirty : UInt<1>, visit : UInt<8>, tag : UInt<54>}}

    smem tag_mem : { valid : UInt<1>, dirty : UInt<1>, visit : UInt<8>, tag : UInt<54>} [8] @[test.scala 84:34]
    infer mport io_tag_read_MPORT = tag_mem[io.cache_req.index], clock @[test.scala 85:31]
    io.tag_read.tag <= io_tag_read_MPORT.tag @[test.scala 85:21]
    io.tag_read.visit <= io_tag_read_MPORT.visit @[test.scala 85:21]
    io.tag_read.dirty <= io_tag_read_MPORT.dirty @[test.scala 85:21]
    io.tag_read.valid <= io_tag_read_MPORT.valid @[test.scala 85:21]
    when io.cache_req.we : @[test.scala 86:30]
      infer mport MPORT = tag_mem[io.cache_req.index], clock @[test.scala 87:24]
      MPORT.tag <= io.tag_write.tag @[test.scala 87:45]
      MPORT.visit <= io.tag_write.visit @[test.scala 87:45]
      MPORT.dirty <= io.tag_write.dirty @[test.scala 87:45]
      MPORT.valid <= io.tag_write.valid @[test.scala 87:45]

  module data_cache :
    input clock : Clock
    input reset : Reset
    output io : { flip cache_req : { index : UInt<3>, we : UInt<1>}, flip data_write : { data : UInt<128>}, data_read : { data : UInt<128>}}

    smem data_mem : { data : UInt<128>} [8] @[test.scala 98:35]
    infer mport io_data_read_MPORT = data_mem[io.cache_req.index], clock @[test.scala 99:33]
    io.data_read.data <= io_data_read_MPORT.data @[test.scala 99:22]
    when io.cache_req.we : @[test.scala 100:30]
      infer mport MPORT = data_mem[io.cache_req.index], clock @[test.scala 101:25]
      MPORT.data <= io.data_write.data @[test.scala 101:46]

  module data_cache_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip cache_req : { index : UInt<3>, we : UInt<1>}, flip data_write : { data : UInt<128>}, data_read : { data : UInt<128>}}

    smem data_mem : { data : UInt<128>} [8] @[test.scala 98:35]
    infer mport io_data_read_MPORT = data_mem[io.cache_req.index], clock @[test.scala 99:33]
    io.data_read.data <= io_data_read_MPORT.data @[test.scala 99:22]
    when io.cache_req.we : @[test.scala 100:30]
      infer mport MPORT = data_mem[io.cache_req.index], clock @[test.scala 101:25]
      MPORT.data <= io.data_write.data @[test.scala 101:46]

  module data_cache_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip cache_req : { index : UInt<3>, we : UInt<1>}, flip data_write : { data : UInt<128>}, data_read : { data : UInt<128>}}

    smem data_mem : { data : UInt<128>} [8] @[test.scala 98:35]
    infer mport io_data_read_MPORT = data_mem[io.cache_req.index], clock @[test.scala 99:33]
    io.data_read.data <= io_data_read_MPORT.data @[test.scala 99:22]
    when io.cache_req.we : @[test.scala 100:30]
      infer mport MPORT = data_mem[io.cache_req.index], clock @[test.scala 101:25]
      MPORT.data <= io.data_write.data @[test.scala 101:46]

  module data_cache_3 :
    input clock : Clock
    input reset : Reset
    output io : { flip cache_req : { index : UInt<3>, we : UInt<1>}, flip data_write : { data : UInt<128>}, data_read : { data : UInt<128>}}

    smem data_mem : { data : UInt<128>} [8] @[test.scala 98:35]
    infer mport io_data_read_MPORT = data_mem[io.cache_req.index], clock @[test.scala 99:33]
    io.data_read.data <= io_data_read_MPORT.data @[test.scala 99:22]
    when io.cache_req.we : @[test.scala 100:30]
      infer mport MPORT = data_mem[io.cache_req.index], clock @[test.scala 101:25]
      MPORT.data <= io.data_write.data @[test.scala 101:46]

  module Cache :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip cpu_request : { addr : UInt<64>, data : UInt<64>, mask : UInt<8>, rw : UInt<1>, valid : UInt<1>}, cpu_response : { data : UInt<64>, ready : UInt<1>}, flip mem_response : { data : UInt<64>, ready : UInt<1>}, mem_request : { addr : UInt<64>, data : UInt<64>, rw : UInt<1>, valid : UInt<1>}}

    reg cache_state : UInt<2>, clock with :
      reset => (reset, UInt<1>("h0")) @[test.scala 126:34]
    reg block_buffer : UInt<128>, clock with :
      reset => (reset, UInt<128>("h0")) @[test.scala 127:35]
    inst tag_mem_0 of tag_cache @[test.scala 128:45]
    tag_mem_0.clock <= clock
    tag_mem_0.reset <= reset
    inst tag_mem_1 of tag_cache_1 @[test.scala 128:45]
    tag_mem_1.clock <= clock
    tag_mem_1.reset <= reset
    inst tag_mem_2 of tag_cache_2 @[test.scala 128:45]
    tag_mem_2.clock <= clock
    tag_mem_2.reset <= reset
    inst tag_mem_3 of tag_cache_3 @[test.scala 128:45]
    tag_mem_3.clock <= clock
    tag_mem_3.reset <= reset
    inst data_mem_0 of data_cache @[test.scala 129:46]
    data_mem_0.clock <= clock
    data_mem_0.reset <= reset
    inst data_mem_1 of data_cache_1 @[test.scala 129:46]
    data_mem_1.clock <= clock
    data_mem_1.reset <= reset
    inst data_mem_2 of data_cache_2 @[test.scala 129:46]
    data_mem_2.clock <= clock
    data_mem_2.reset <= reset
    inst data_mem_3 of data_cache_3 @[test.scala 129:46]
    data_mem_3.clock <= clock
    data_mem_3.reset <= reset
    wire fill_block_en : UInt<1>
    fill_block_en <= UInt<1>("h0")
    reg index : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 62:40]
    wire warp_out : UInt<1>
    warp_out <= UInt<1>("h0")
    when fill_block_en : @[Counter.scala 120:16]
      node wrap_wrap = eq(index, UInt<1>("h1")) @[Counter.scala 74:24]
      node _wrap_value_T = add(index, UInt<1>("h1")) @[Counter.scala 78:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[Counter.scala 78:24]
      index <= _wrap_value_T_1 @[Counter.scala 78:15]
      warp_out <= wrap_wrap @[Counter.scala 120:23]
    wire next_state : UInt<2>
    next_state <= UInt<1>("h0")
    reg replace : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[test.scala 135:30]
    reg refill_addr : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[test.scala 136:34]
    reg writeback_addr : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[test.scala 137:37]
    cache_state <= next_state @[test.scala 139:21]
    node _tag_mem_0_io_cache_req_index_T = bits(io.cpu_request.addr, 8, 7) @[test.scala 142:69]
    tag_mem_0.io.cache_req.index <= _tag_mem_0_io_cache_req_index_T @[test.scala 142:47]
    node _data_mem_0_io_cache_req_index_T = bits(io.cpu_request.addr, 8, 7) @[test.scala 143:70]
    data_mem_0.io.cache_req.index <= _data_mem_0_io_cache_req_index_T @[test.scala 143:48]
    tag_mem_0.io.cache_req.we <= UInt<1>("h0") @[test.scala 144:44]
    data_mem_0.io.cache_req.we <= UInt<1>("h0") @[test.scala 145:45]
    tag_mem_0.io.tag_write.tag <= tag_mem_0.io.tag_read.tag @[test.scala 146:41]
    tag_mem_0.io.tag_write.visit <= tag_mem_0.io.tag_read.visit @[test.scala 146:41]
    tag_mem_0.io.tag_write.dirty <= tag_mem_0.io.tag_read.dirty @[test.scala 146:41]
    tag_mem_0.io.tag_write.valid <= tag_mem_0.io.tag_read.valid @[test.scala 146:41]
    data_mem_0.io.data_write.data <= data_mem_0.io.data_read.data @[test.scala 147:43]
    node _tag_mem_1_io_cache_req_index_T = bits(io.cpu_request.addr, 8, 7) @[test.scala 142:69]
    tag_mem_1.io.cache_req.index <= _tag_mem_1_io_cache_req_index_T @[test.scala 142:47]
    node _data_mem_1_io_cache_req_index_T = bits(io.cpu_request.addr, 8, 7) @[test.scala 143:70]
    data_mem_1.io.cache_req.index <= _data_mem_1_io_cache_req_index_T @[test.scala 143:48]
    tag_mem_1.io.cache_req.we <= UInt<1>("h0") @[test.scala 144:44]
    data_mem_1.io.cache_req.we <= UInt<1>("h0") @[test.scala 145:45]
    tag_mem_1.io.tag_write.tag <= tag_mem_1.io.tag_read.tag @[test.scala 146:41]
    tag_mem_1.io.tag_write.visit <= tag_mem_1.io.tag_read.visit @[test.scala 146:41]
    tag_mem_1.io.tag_write.dirty <= tag_mem_1.io.tag_read.dirty @[test.scala 146:41]
    tag_mem_1.io.tag_write.valid <= tag_mem_1.io.tag_read.valid @[test.scala 146:41]
    data_mem_1.io.data_write.data <= data_mem_1.io.data_read.data @[test.scala 147:43]
    node _tag_mem_2_io_cache_req_index_T = bits(io.cpu_request.addr, 8, 7) @[test.scala 142:69]
    tag_mem_2.io.cache_req.index <= _tag_mem_2_io_cache_req_index_T @[test.scala 142:47]
    node _data_mem_2_io_cache_req_index_T = bits(io.cpu_request.addr, 8, 7) @[test.scala 143:70]
    data_mem_2.io.cache_req.index <= _data_mem_2_io_cache_req_index_T @[test.scala 143:48]
    tag_mem_2.io.cache_req.we <= UInt<1>("h0") @[test.scala 144:44]
    data_mem_2.io.cache_req.we <= UInt<1>("h0") @[test.scala 145:45]
    tag_mem_2.io.tag_write.tag <= tag_mem_2.io.tag_read.tag @[test.scala 146:41]
    tag_mem_2.io.tag_write.visit <= tag_mem_2.io.tag_read.visit @[test.scala 146:41]
    tag_mem_2.io.tag_write.dirty <= tag_mem_2.io.tag_read.dirty @[test.scala 146:41]
    tag_mem_2.io.tag_write.valid <= tag_mem_2.io.tag_read.valid @[test.scala 146:41]
    data_mem_2.io.data_write.data <= data_mem_2.io.data_read.data @[test.scala 147:43]
    node _tag_mem_3_io_cache_req_index_T = bits(io.cpu_request.addr, 8, 7) @[test.scala 142:69]
    tag_mem_3.io.cache_req.index <= _tag_mem_3_io_cache_req_index_T @[test.scala 142:47]
    node _data_mem_3_io_cache_req_index_T = bits(io.cpu_request.addr, 8, 7) @[test.scala 143:70]
    data_mem_3.io.cache_req.index <= _data_mem_3_io_cache_req_index_T @[test.scala 143:48]
    tag_mem_3.io.cache_req.we <= UInt<1>("h0") @[test.scala 144:44]
    data_mem_3.io.cache_req.we <= UInt<1>("h0") @[test.scala 145:45]
    tag_mem_3.io.tag_write.tag <= tag_mem_3.io.tag_read.tag @[test.scala 146:41]
    tag_mem_3.io.tag_write.visit <= tag_mem_3.io.tag_read.visit @[test.scala 146:41]
    tag_mem_3.io.tag_write.dirty <= tag_mem_3.io.tag_read.dirty @[test.scala 146:41]
    tag_mem_3.io.tag_write.valid <= tag_mem_3.io.tag_read.valid @[test.scala 146:41]
    data_mem_3.io.data_write.data <= data_mem_3.io.data_read.data @[test.scala 147:43]
    io.cpu_response.ready <= UInt<1>("h0") @[test.scala 153:31]
    io.cpu_response.data <= UInt<1>("h0") @[test.scala 154:30]
    io.mem_request.valid <= UInt<1>("h0") @[test.scala 155:30]
    io.mem_request.rw <= UInt<1>("h0") @[test.scala 156:27]
    io.mem_request.addr <= UInt<1>("h0") @[test.scala 157:29]
    io.mem_request.data <= UInt<1>("h0") @[test.scala 158:29]
    node _T = asUInt(UInt<1>("h0")) @[test.scala 160:28]
    node _T_1 = asUInt(cache_state) @[test.scala 160:28]
    node _T_2 = eq(_T, _T_1) @[test.scala 160:28]
    when _T_2 : @[test.scala 160:28]
      when io.cpu_request.valid : @[test.scala 162:51]
        next_state <= UInt<1>("h1") @[test.scala 163:44]
    else :
      node _T_3 = asUInt(UInt<1>("h1")) @[test.scala 160:28]
      node _T_4 = asUInt(cache_state) @[test.scala 160:28]
      node _T_5 = eq(_T_3, _T_4) @[test.scala 160:28]
      when _T_5 : @[test.scala 160:28]
        wire is_match : UInt<1>[4] @[test.scala 167:47]
        is_match[0] <= UInt<1>("h0") @[test.scala 167:47]
        is_match[1] <= UInt<1>("h0") @[test.scala 167:47]
        is_match[2] <= UInt<1>("h0") @[test.scala 167:47]
        is_match[3] <= UInt<1>("h0") @[test.scala 167:47]
        node _T_6 = bits(io.cpu_request.addr, 63, 9) @[test.scala 168:96]
        node _T_7 = eq(tag_mem_0.io.tag_read.tag, _T_6) @[test.scala 168:73]
        node _T_8 = and(_T_7, tag_mem_0.io.tag_read.valid) @[test.scala 168:141]
        node _T_9 = bits(io.cpu_request.addr, 63, 9) @[test.scala 168:96]
        node _T_10 = eq(tag_mem_1.io.tag_read.tag, _T_9) @[test.scala 168:73]
        node _T_11 = and(_T_10, tag_mem_1.io.tag_read.valid) @[test.scala 168:141]
        node _T_12 = bits(io.cpu_request.addr, 63, 9) @[test.scala 168:96]
        node _T_13 = eq(tag_mem_2.io.tag_read.tag, _T_12) @[test.scala 168:73]
        node _T_14 = and(_T_13, tag_mem_2.io.tag_read.valid) @[test.scala 168:141]
        node _T_15 = bits(io.cpu_request.addr, 63, 9) @[test.scala 168:96]
        node _T_16 = eq(tag_mem_3.io.tag_read.tag, _T_15) @[test.scala 168:73]
        node _T_17 = and(_T_16, tag_mem_3.io.tag_read.valid) @[test.scala 168:141]
        is_match[0] <= _T_8 @[test.scala 168:34]
        is_match[1] <= _T_11 @[test.scala 168:34]
        is_match[2] <= _T_14 @[test.scala 168:34]
        is_match[3] <= _T_17 @[test.scala 168:34]
        node lo = cat(is_match[1], is_match[0]) @[test.scala 169:39]
        node hi = cat(is_match[3], is_match[2]) @[test.scala 169:39]
        node _T_18 = cat(hi, lo) @[test.scala 169:39]
        node _T_19 = orr(_T_18) @[test.scala 169:46]
        when _T_19 : @[test.scala 169:50]
          io.cpu_response.ready <= UInt<1>("h1") @[test.scala 170:55]
          node _io_cpu_response_data_T = mux(is_match[2], data_mem_2.io.data_read.data, data_mem_3.io.data_read.data) @[Mux.scala 101:16]
          node _io_cpu_response_data_T_1 = mux(is_match[1], data_mem_1.io.data_read.data, _io_cpu_response_data_T) @[Mux.scala 101:16]
          node _io_cpu_response_data_T_2 = mux(is_match[0], data_mem_0.io.data_read.data, _io_cpu_response_data_T_1) @[Mux.scala 101:16]
          io.cpu_response.data <= _io_cpu_response_data_T_2 @[test.scala 171:54]
          tag_mem_0.io.cache_req.we <= UInt<1>("h1") @[test.scala 173:68]
          tag_mem_0.io.tag_write.visit <= UInt<1>("h0") @[test.scala 174:71]
          tag_mem_1.io.cache_req.we <= UInt<1>("h1") @[test.scala 173:68]
          tag_mem_1.io.tag_write.visit <= UInt<1>("h0") @[test.scala 174:71]
          tag_mem_2.io.cache_req.we <= UInt<1>("h1") @[test.scala 173:68]
          tag_mem_2.io.tag_write.visit <= UInt<1>("h0") @[test.scala 174:71]
          tag_mem_3.io.cache_req.we <= UInt<1>("h1") @[test.scala 173:68]
          tag_mem_3.io.tag_write.visit <= UInt<1>("h0") @[test.scala 174:71]
          when io.cpu_request.rw : @[test.scala 177:56]
            when is_match[0] : @[test.scala 179:66]
              data_mem_0.io.cache_req.we <= UInt<1>("h1") @[test.scala 181:85]
              tag_mem_0.io.tag_write.valid <= UInt<1>("h1") @[test.scala 182:87]
              tag_mem_0.io.tag_write.dirty <= UInt<1>("h1") @[test.scala 183:87]
              node _tag_mem_0_io_tag_write_tag_T = bits(io.cpu_request.addr, 63, 9) @[test.scala 184:107]
              tag_mem_0.io.tag_write.tag <= _tag_mem_0_io_tag_write_tag_T @[test.scala 184:85]
              wire part : UInt<64>[8] @[test.scala 186:72]
              node _part_0_T = bits(io.cpu_request.mask, 0, 0) @[test.scala 188:99]
              node _part_0_T_1 = bits(io.cpu_request.data, 7, 0) @[test.scala 188:123]
              node _part_0_T_2 = shl(_part_0_T_1, 0) @[test.scala 188:140]
              node _part_0_T_3 = bits(data_mem_0.io.data_read.data, 7, 0) @[test.scala 188:179]
              node _part_0_T_4 = shl(_part_0_T_3, 0) @[test.scala 188:200]
              node _part_0_T_5 = mux(_part_0_T, _part_0_T_2, _part_0_T_4) @[test.scala 188:79]
              part[0] <= _part_0_T_5 @[test.scala 188:73]
              node _part_1_T = bits(io.cpu_request.mask, 1, 1) @[test.scala 188:99]
              node _part_1_T_1 = bits(io.cpu_request.data, 15, 8) @[test.scala 188:123]
              node _part_1_T_2 = shl(_part_1_T_1, 8) @[test.scala 188:140]
              node _part_1_T_3 = bits(data_mem_0.io.data_read.data, 15, 8) @[test.scala 188:179]
              node _part_1_T_4 = shl(_part_1_T_3, 8) @[test.scala 188:200]
              node _part_1_T_5 = mux(_part_1_T, _part_1_T_2, _part_1_T_4) @[test.scala 188:79]
              part[1] <= _part_1_T_5 @[test.scala 188:73]
              node _part_2_T = bits(io.cpu_request.mask, 2, 2) @[test.scala 188:99]
              node _part_2_T_1 = bits(io.cpu_request.data, 23, 16) @[test.scala 188:123]
              node _part_2_T_2 = shl(_part_2_T_1, 16) @[test.scala 188:140]
              node _part_2_T_3 = bits(data_mem_0.io.data_read.data, 23, 16) @[test.scala 188:179]
              node _part_2_T_4 = shl(_part_2_T_3, 16) @[test.scala 188:200]
              node _part_2_T_5 = mux(_part_2_T, _part_2_T_2, _part_2_T_4) @[test.scala 188:79]
              part[2] <= _part_2_T_5 @[test.scala 188:73]
              node _part_3_T = bits(io.cpu_request.mask, 3, 3) @[test.scala 188:99]
              node _part_3_T_1 = bits(io.cpu_request.data, 31, 24) @[test.scala 188:123]
              node _part_3_T_2 = shl(_part_3_T_1, 24) @[test.scala 188:140]
              node _part_3_T_3 = bits(data_mem_0.io.data_read.data, 31, 24) @[test.scala 188:179]
              node _part_3_T_4 = shl(_part_3_T_3, 24) @[test.scala 188:200]
              node _part_3_T_5 = mux(_part_3_T, _part_3_T_2, _part_3_T_4) @[test.scala 188:79]
              part[3] <= _part_3_T_5 @[test.scala 188:73]
              node _part_4_T = bits(io.cpu_request.mask, 4, 4) @[test.scala 188:99]
              node _part_4_T_1 = bits(io.cpu_request.data, 39, 32) @[test.scala 188:123]
              node _part_4_T_2 = shl(_part_4_T_1, 32) @[test.scala 188:140]
              node _part_4_T_3 = bits(data_mem_0.io.data_read.data, 39, 32) @[test.scala 188:179]
              node _part_4_T_4 = shl(_part_4_T_3, 32) @[test.scala 188:200]
              node _part_4_T_5 = mux(_part_4_T, _part_4_T_2, _part_4_T_4) @[test.scala 188:79]
              part[4] <= _part_4_T_5 @[test.scala 188:73]
              node _part_5_T = bits(io.cpu_request.mask, 5, 5) @[test.scala 188:99]
              node _part_5_T_1 = bits(io.cpu_request.data, 47, 40) @[test.scala 188:123]
              node _part_5_T_2 = shl(_part_5_T_1, 40) @[test.scala 188:140]
              node _part_5_T_3 = bits(data_mem_0.io.data_read.data, 47, 40) @[test.scala 188:179]
              node _part_5_T_4 = shl(_part_5_T_3, 40) @[test.scala 188:200]
              node _part_5_T_5 = mux(_part_5_T, _part_5_T_2, _part_5_T_4) @[test.scala 188:79]
              part[5] <= _part_5_T_5 @[test.scala 188:73]
              node _part_6_T = bits(io.cpu_request.mask, 6, 6) @[test.scala 188:99]
              node _part_6_T_1 = bits(io.cpu_request.data, 55, 48) @[test.scala 188:123]
              node _part_6_T_2 = shl(_part_6_T_1, 48) @[test.scala 188:140]
              node _part_6_T_3 = bits(data_mem_0.io.data_read.data, 55, 48) @[test.scala 188:179]
              node _part_6_T_4 = shl(_part_6_T_3, 48) @[test.scala 188:200]
              node _part_6_T_5 = mux(_part_6_T, _part_6_T_2, _part_6_T_4) @[test.scala 188:79]
              part[6] <= _part_6_T_5 @[test.scala 188:73]
              node _part_7_T = bits(io.cpu_request.mask, 7, 7) @[test.scala 188:99]
              node _part_7_T_1 = bits(io.cpu_request.data, 63, 56) @[test.scala 188:123]
              node _part_7_T_2 = shl(_part_7_T_1, 56) @[test.scala 188:140]
              node _part_7_T_3 = bits(data_mem_0.io.data_read.data, 63, 56) @[test.scala 188:179]
              node _part_7_T_4 = shl(_part_7_T_3, 56) @[test.scala 188:200]
              node _part_7_T_5 = mux(_part_7_T, _part_7_T_2, _part_7_T_4) @[test.scala 188:79]
              part[7] <= _part_7_T_5 @[test.scala 188:73]
              node _data_mem_0_io_data_write_data_T = bits(io.cpu_request.addr, 6, 0) @[test.scala 193:114]
              node _data_mem_0_io_data_write_data_T_1 = eq(_data_mem_0_io_data_write_data_T, UInt<1>("h0")) @[test.scala 193:137]
              node _data_mem_0_io_data_write_data_T_2 = or(part[0], part[1]) @[test.scala 193:164]
              node _data_mem_0_io_data_write_data_T_3 = or(_data_mem_0_io_data_write_data_T_2, part[2]) @[test.scala 193:164]
              node _data_mem_0_io_data_write_data_T_4 = or(_data_mem_0_io_data_write_data_T_3, part[3]) @[test.scala 193:164]
              node _data_mem_0_io_data_write_data_T_5 = or(_data_mem_0_io_data_write_data_T_4, part[4]) @[test.scala 193:164]
              node _data_mem_0_io_data_write_data_T_6 = or(_data_mem_0_io_data_write_data_T_5, part[5]) @[test.scala 193:164]
              node _data_mem_0_io_data_write_data_T_7 = or(_data_mem_0_io_data_write_data_T_6, part[6]) @[test.scala 193:164]
              node _data_mem_0_io_data_write_data_T_8 = or(_data_mem_0_io_data_write_data_T_7, part[7]) @[test.scala 193:164]
              node _data_mem_0_io_data_write_data_T_9 = bits(data_mem_0.io.data_read.data, 63, 0) @[test.scala 193:199]
              node _data_mem_0_io_data_write_data_T_10 = cat(_data_mem_0_io_data_write_data_T_8, _data_mem_0_io_data_write_data_T_9) @[Cat.scala 31:58]
              node _data_mem_0_io_data_write_data_T_11 = bits(data_mem_0.io.data_read.data, 127, 64) @[test.scala 193:250]
              node _data_mem_0_io_data_write_data_T_12 = or(part[0], part[1]) @[test.scala 193:291]
              node _data_mem_0_io_data_write_data_T_13 = or(_data_mem_0_io_data_write_data_T_12, part[2]) @[test.scala 193:291]
              node _data_mem_0_io_data_write_data_T_14 = or(_data_mem_0_io_data_write_data_T_13, part[3]) @[test.scala 193:291]
              node _data_mem_0_io_data_write_data_T_15 = or(_data_mem_0_io_data_write_data_T_14, part[4]) @[test.scala 193:291]
              node _data_mem_0_io_data_write_data_T_16 = or(_data_mem_0_io_data_write_data_T_15, part[5]) @[test.scala 193:291]
              node _data_mem_0_io_data_write_data_T_17 = or(_data_mem_0_io_data_write_data_T_16, part[6]) @[test.scala 193:291]
              node _data_mem_0_io_data_write_data_T_18 = or(_data_mem_0_io_data_write_data_T_17, part[7]) @[test.scala 193:291]
              node _data_mem_0_io_data_write_data_T_19 = cat(_data_mem_0_io_data_write_data_T_11, _data_mem_0_io_data_write_data_T_18) @[Cat.scala 31:58]
              node _data_mem_0_io_data_write_data_T_20 = mux(_data_mem_0_io_data_write_data_T_1, _data_mem_0_io_data_write_data_T_10, _data_mem_0_io_data_write_data_T_19) @[test.scala 193:94]
              data_mem_0.io.data_write.data <= _data_mem_0_io_data_write_data_T_20 @[test.scala 193:88]
            when is_match[1] : @[test.scala 179:66]
              data_mem_1.io.cache_req.we <= UInt<1>("h1") @[test.scala 181:85]
              tag_mem_1.io.tag_write.valid <= UInt<1>("h1") @[test.scala 182:87]
              tag_mem_1.io.tag_write.dirty <= UInt<1>("h1") @[test.scala 183:87]
              node _tag_mem_1_io_tag_write_tag_T = bits(io.cpu_request.addr, 63, 9) @[test.scala 184:107]
              tag_mem_1.io.tag_write.tag <= _tag_mem_1_io_tag_write_tag_T @[test.scala 184:85]
              wire part_1 : UInt<64>[8] @[test.scala 186:72]
              node _part_0_T_6 = bits(io.cpu_request.mask, 0, 0) @[test.scala 188:99]
              node _part_0_T_7 = bits(io.cpu_request.data, 7, 0) @[test.scala 188:123]
              node _part_0_T_8 = shl(_part_0_T_7, 0) @[test.scala 188:140]
              node _part_0_T_9 = bits(data_mem_1.io.data_read.data, 7, 0) @[test.scala 188:179]
              node _part_0_T_10 = shl(_part_0_T_9, 0) @[test.scala 188:200]
              node _part_0_T_11 = mux(_part_0_T_6, _part_0_T_8, _part_0_T_10) @[test.scala 188:79]
              part_1[0] <= _part_0_T_11 @[test.scala 188:73]
              node _part_1_T_6 = bits(io.cpu_request.mask, 1, 1) @[test.scala 188:99]
              node _part_1_T_7 = bits(io.cpu_request.data, 15, 8) @[test.scala 188:123]
              node _part_1_T_8 = shl(_part_1_T_7, 8) @[test.scala 188:140]
              node _part_1_T_9 = bits(data_mem_1.io.data_read.data, 15, 8) @[test.scala 188:179]
              node _part_1_T_10 = shl(_part_1_T_9, 8) @[test.scala 188:200]
              node _part_1_T_11 = mux(_part_1_T_6, _part_1_T_8, _part_1_T_10) @[test.scala 188:79]
              part_1[1] <= _part_1_T_11 @[test.scala 188:73]
              node _part_2_T_6 = bits(io.cpu_request.mask, 2, 2) @[test.scala 188:99]
              node _part_2_T_7 = bits(io.cpu_request.data, 23, 16) @[test.scala 188:123]
              node _part_2_T_8 = shl(_part_2_T_7, 16) @[test.scala 188:140]
              node _part_2_T_9 = bits(data_mem_1.io.data_read.data, 23, 16) @[test.scala 188:179]
              node _part_2_T_10 = shl(_part_2_T_9, 16) @[test.scala 188:200]
              node _part_2_T_11 = mux(_part_2_T_6, _part_2_T_8, _part_2_T_10) @[test.scala 188:79]
              part_1[2] <= _part_2_T_11 @[test.scala 188:73]
              node _part_3_T_6 = bits(io.cpu_request.mask, 3, 3) @[test.scala 188:99]
              node _part_3_T_7 = bits(io.cpu_request.data, 31, 24) @[test.scala 188:123]
              node _part_3_T_8 = shl(_part_3_T_7, 24) @[test.scala 188:140]
              node _part_3_T_9 = bits(data_mem_1.io.data_read.data, 31, 24) @[test.scala 188:179]
              node _part_3_T_10 = shl(_part_3_T_9, 24) @[test.scala 188:200]
              node _part_3_T_11 = mux(_part_3_T_6, _part_3_T_8, _part_3_T_10) @[test.scala 188:79]
              part_1[3] <= _part_3_T_11 @[test.scala 188:73]
              node _part_4_T_6 = bits(io.cpu_request.mask, 4, 4) @[test.scala 188:99]
              node _part_4_T_7 = bits(io.cpu_request.data, 39, 32) @[test.scala 188:123]
              node _part_4_T_8 = shl(_part_4_T_7, 32) @[test.scala 188:140]
              node _part_4_T_9 = bits(data_mem_1.io.data_read.data, 39, 32) @[test.scala 188:179]
              node _part_4_T_10 = shl(_part_4_T_9, 32) @[test.scala 188:200]
              node _part_4_T_11 = mux(_part_4_T_6, _part_4_T_8, _part_4_T_10) @[test.scala 188:79]
              part_1[4] <= _part_4_T_11 @[test.scala 188:73]
              node _part_5_T_6 = bits(io.cpu_request.mask, 5, 5) @[test.scala 188:99]
              node _part_5_T_7 = bits(io.cpu_request.data, 47, 40) @[test.scala 188:123]
              node _part_5_T_8 = shl(_part_5_T_7, 40) @[test.scala 188:140]
              node _part_5_T_9 = bits(data_mem_1.io.data_read.data, 47, 40) @[test.scala 188:179]
              node _part_5_T_10 = shl(_part_5_T_9, 40) @[test.scala 188:200]
              node _part_5_T_11 = mux(_part_5_T_6, _part_5_T_8, _part_5_T_10) @[test.scala 188:79]
              part_1[5] <= _part_5_T_11 @[test.scala 188:73]
              node _part_6_T_6 = bits(io.cpu_request.mask, 6, 6) @[test.scala 188:99]
              node _part_6_T_7 = bits(io.cpu_request.data, 55, 48) @[test.scala 188:123]
              node _part_6_T_8 = shl(_part_6_T_7, 48) @[test.scala 188:140]
              node _part_6_T_9 = bits(data_mem_1.io.data_read.data, 55, 48) @[test.scala 188:179]
              node _part_6_T_10 = shl(_part_6_T_9, 48) @[test.scala 188:200]
              node _part_6_T_11 = mux(_part_6_T_6, _part_6_T_8, _part_6_T_10) @[test.scala 188:79]
              part_1[6] <= _part_6_T_11 @[test.scala 188:73]
              node _part_7_T_6 = bits(io.cpu_request.mask, 7, 7) @[test.scala 188:99]
              node _part_7_T_7 = bits(io.cpu_request.data, 63, 56) @[test.scala 188:123]
              node _part_7_T_8 = shl(_part_7_T_7, 56) @[test.scala 188:140]
              node _part_7_T_9 = bits(data_mem_1.io.data_read.data, 63, 56) @[test.scala 188:179]
              node _part_7_T_10 = shl(_part_7_T_9, 56) @[test.scala 188:200]
              node _part_7_T_11 = mux(_part_7_T_6, _part_7_T_8, _part_7_T_10) @[test.scala 188:79]
              part_1[7] <= _part_7_T_11 @[test.scala 188:73]
              node _data_mem_1_io_data_write_data_T = bits(io.cpu_request.addr, 6, 0) @[test.scala 193:114]
              node _data_mem_1_io_data_write_data_T_1 = eq(_data_mem_1_io_data_write_data_T, UInt<1>("h0")) @[test.scala 193:137]
              node _data_mem_1_io_data_write_data_T_2 = or(part_1[0], part_1[1]) @[test.scala 193:164]
              node _data_mem_1_io_data_write_data_T_3 = or(_data_mem_1_io_data_write_data_T_2, part_1[2]) @[test.scala 193:164]
              node _data_mem_1_io_data_write_data_T_4 = or(_data_mem_1_io_data_write_data_T_3, part_1[3]) @[test.scala 193:164]
              node _data_mem_1_io_data_write_data_T_5 = or(_data_mem_1_io_data_write_data_T_4, part_1[4]) @[test.scala 193:164]
              node _data_mem_1_io_data_write_data_T_6 = or(_data_mem_1_io_data_write_data_T_5, part_1[5]) @[test.scala 193:164]
              node _data_mem_1_io_data_write_data_T_7 = or(_data_mem_1_io_data_write_data_T_6, part_1[6]) @[test.scala 193:164]
              node _data_mem_1_io_data_write_data_T_8 = or(_data_mem_1_io_data_write_data_T_7, part_1[7]) @[test.scala 193:164]
              node _data_mem_1_io_data_write_data_T_9 = bits(data_mem_1.io.data_read.data, 63, 0) @[test.scala 193:199]
              node _data_mem_1_io_data_write_data_T_10 = cat(_data_mem_1_io_data_write_data_T_8, _data_mem_1_io_data_write_data_T_9) @[Cat.scala 31:58]
              node _data_mem_1_io_data_write_data_T_11 = bits(data_mem_1.io.data_read.data, 127, 64) @[test.scala 193:250]
              node _data_mem_1_io_data_write_data_T_12 = or(part_1[0], part_1[1]) @[test.scala 193:291]
              node _data_mem_1_io_data_write_data_T_13 = or(_data_mem_1_io_data_write_data_T_12, part_1[2]) @[test.scala 193:291]
              node _data_mem_1_io_data_write_data_T_14 = or(_data_mem_1_io_data_write_data_T_13, part_1[3]) @[test.scala 193:291]
              node _data_mem_1_io_data_write_data_T_15 = or(_data_mem_1_io_data_write_data_T_14, part_1[4]) @[test.scala 193:291]
              node _data_mem_1_io_data_write_data_T_16 = or(_data_mem_1_io_data_write_data_T_15, part_1[5]) @[test.scala 193:291]
              node _data_mem_1_io_data_write_data_T_17 = or(_data_mem_1_io_data_write_data_T_16, part_1[6]) @[test.scala 193:291]
              node _data_mem_1_io_data_write_data_T_18 = or(_data_mem_1_io_data_write_data_T_17, part_1[7]) @[test.scala 193:291]
              node _data_mem_1_io_data_write_data_T_19 = cat(_data_mem_1_io_data_write_data_T_11, _data_mem_1_io_data_write_data_T_18) @[Cat.scala 31:58]
              node _data_mem_1_io_data_write_data_T_20 = mux(_data_mem_1_io_data_write_data_T_1, _data_mem_1_io_data_write_data_T_10, _data_mem_1_io_data_write_data_T_19) @[test.scala 193:94]
              data_mem_1.io.data_write.data <= _data_mem_1_io_data_write_data_T_20 @[test.scala 193:88]
            when is_match[2] : @[test.scala 179:66]
              data_mem_2.io.cache_req.we <= UInt<1>("h1") @[test.scala 181:85]
              tag_mem_2.io.tag_write.valid <= UInt<1>("h1") @[test.scala 182:87]
              tag_mem_2.io.tag_write.dirty <= UInt<1>("h1") @[test.scala 183:87]
              node _tag_mem_2_io_tag_write_tag_T = bits(io.cpu_request.addr, 63, 9) @[test.scala 184:107]
              tag_mem_2.io.tag_write.tag <= _tag_mem_2_io_tag_write_tag_T @[test.scala 184:85]
              wire part_2 : UInt<64>[8] @[test.scala 186:72]
              node _part_0_T_12 = bits(io.cpu_request.mask, 0, 0) @[test.scala 188:99]
              node _part_0_T_13 = bits(io.cpu_request.data, 7, 0) @[test.scala 188:123]
              node _part_0_T_14 = shl(_part_0_T_13, 0) @[test.scala 188:140]
              node _part_0_T_15 = bits(data_mem_2.io.data_read.data, 7, 0) @[test.scala 188:179]
              node _part_0_T_16 = shl(_part_0_T_15, 0) @[test.scala 188:200]
              node _part_0_T_17 = mux(_part_0_T_12, _part_0_T_14, _part_0_T_16) @[test.scala 188:79]
              part_2[0] <= _part_0_T_17 @[test.scala 188:73]
              node _part_1_T_12 = bits(io.cpu_request.mask, 1, 1) @[test.scala 188:99]
              node _part_1_T_13 = bits(io.cpu_request.data, 15, 8) @[test.scala 188:123]
              node _part_1_T_14 = shl(_part_1_T_13, 8) @[test.scala 188:140]
              node _part_1_T_15 = bits(data_mem_2.io.data_read.data, 15, 8) @[test.scala 188:179]
              node _part_1_T_16 = shl(_part_1_T_15, 8) @[test.scala 188:200]
              node _part_1_T_17 = mux(_part_1_T_12, _part_1_T_14, _part_1_T_16) @[test.scala 188:79]
              part_2[1] <= _part_1_T_17 @[test.scala 188:73]
              node _part_2_T_12 = bits(io.cpu_request.mask, 2, 2) @[test.scala 188:99]
              node _part_2_T_13 = bits(io.cpu_request.data, 23, 16) @[test.scala 188:123]
              node _part_2_T_14 = shl(_part_2_T_13, 16) @[test.scala 188:140]
              node _part_2_T_15 = bits(data_mem_2.io.data_read.data, 23, 16) @[test.scala 188:179]
              node _part_2_T_16 = shl(_part_2_T_15, 16) @[test.scala 188:200]
              node _part_2_T_17 = mux(_part_2_T_12, _part_2_T_14, _part_2_T_16) @[test.scala 188:79]
              part_2[2] <= _part_2_T_17 @[test.scala 188:73]
              node _part_3_T_12 = bits(io.cpu_request.mask, 3, 3) @[test.scala 188:99]
              node _part_3_T_13 = bits(io.cpu_request.data, 31, 24) @[test.scala 188:123]
              node _part_3_T_14 = shl(_part_3_T_13, 24) @[test.scala 188:140]
              node _part_3_T_15 = bits(data_mem_2.io.data_read.data, 31, 24) @[test.scala 188:179]
              node _part_3_T_16 = shl(_part_3_T_15, 24) @[test.scala 188:200]
              node _part_3_T_17 = mux(_part_3_T_12, _part_3_T_14, _part_3_T_16) @[test.scala 188:79]
              part_2[3] <= _part_3_T_17 @[test.scala 188:73]
              node _part_4_T_12 = bits(io.cpu_request.mask, 4, 4) @[test.scala 188:99]
              node _part_4_T_13 = bits(io.cpu_request.data, 39, 32) @[test.scala 188:123]
              node _part_4_T_14 = shl(_part_4_T_13, 32) @[test.scala 188:140]
              node _part_4_T_15 = bits(data_mem_2.io.data_read.data, 39, 32) @[test.scala 188:179]
              node _part_4_T_16 = shl(_part_4_T_15, 32) @[test.scala 188:200]
              node _part_4_T_17 = mux(_part_4_T_12, _part_4_T_14, _part_4_T_16) @[test.scala 188:79]
              part_2[4] <= _part_4_T_17 @[test.scala 188:73]
              node _part_5_T_12 = bits(io.cpu_request.mask, 5, 5) @[test.scala 188:99]
              node _part_5_T_13 = bits(io.cpu_request.data, 47, 40) @[test.scala 188:123]
              node _part_5_T_14 = shl(_part_5_T_13, 40) @[test.scala 188:140]
              node _part_5_T_15 = bits(data_mem_2.io.data_read.data, 47, 40) @[test.scala 188:179]
              node _part_5_T_16 = shl(_part_5_T_15, 40) @[test.scala 188:200]
              node _part_5_T_17 = mux(_part_5_T_12, _part_5_T_14, _part_5_T_16) @[test.scala 188:79]
              part_2[5] <= _part_5_T_17 @[test.scala 188:73]
              node _part_6_T_12 = bits(io.cpu_request.mask, 6, 6) @[test.scala 188:99]
              node _part_6_T_13 = bits(io.cpu_request.data, 55, 48) @[test.scala 188:123]
              node _part_6_T_14 = shl(_part_6_T_13, 48) @[test.scala 188:140]
              node _part_6_T_15 = bits(data_mem_2.io.data_read.data, 55, 48) @[test.scala 188:179]
              node _part_6_T_16 = shl(_part_6_T_15, 48) @[test.scala 188:200]
              node _part_6_T_17 = mux(_part_6_T_12, _part_6_T_14, _part_6_T_16) @[test.scala 188:79]
              part_2[6] <= _part_6_T_17 @[test.scala 188:73]
              node _part_7_T_12 = bits(io.cpu_request.mask, 7, 7) @[test.scala 188:99]
              node _part_7_T_13 = bits(io.cpu_request.data, 63, 56) @[test.scala 188:123]
              node _part_7_T_14 = shl(_part_7_T_13, 56) @[test.scala 188:140]
              node _part_7_T_15 = bits(data_mem_2.io.data_read.data, 63, 56) @[test.scala 188:179]
              node _part_7_T_16 = shl(_part_7_T_15, 56) @[test.scala 188:200]
              node _part_7_T_17 = mux(_part_7_T_12, _part_7_T_14, _part_7_T_16) @[test.scala 188:79]
              part_2[7] <= _part_7_T_17 @[test.scala 188:73]
              node _data_mem_2_io_data_write_data_T = bits(io.cpu_request.addr, 6, 0) @[test.scala 193:114]
              node _data_mem_2_io_data_write_data_T_1 = eq(_data_mem_2_io_data_write_data_T, UInt<1>("h0")) @[test.scala 193:137]
              node _data_mem_2_io_data_write_data_T_2 = or(part_2[0], part_2[1]) @[test.scala 193:164]
              node _data_mem_2_io_data_write_data_T_3 = or(_data_mem_2_io_data_write_data_T_2, part_2[2]) @[test.scala 193:164]
              node _data_mem_2_io_data_write_data_T_4 = or(_data_mem_2_io_data_write_data_T_3, part_2[3]) @[test.scala 193:164]
              node _data_mem_2_io_data_write_data_T_5 = or(_data_mem_2_io_data_write_data_T_4, part_2[4]) @[test.scala 193:164]
              node _data_mem_2_io_data_write_data_T_6 = or(_data_mem_2_io_data_write_data_T_5, part_2[5]) @[test.scala 193:164]
              node _data_mem_2_io_data_write_data_T_7 = or(_data_mem_2_io_data_write_data_T_6, part_2[6]) @[test.scala 193:164]
              node _data_mem_2_io_data_write_data_T_8 = or(_data_mem_2_io_data_write_data_T_7, part_2[7]) @[test.scala 193:164]
              node _data_mem_2_io_data_write_data_T_9 = bits(data_mem_2.io.data_read.data, 63, 0) @[test.scala 193:199]
              node _data_mem_2_io_data_write_data_T_10 = cat(_data_mem_2_io_data_write_data_T_8, _data_mem_2_io_data_write_data_T_9) @[Cat.scala 31:58]
              node _data_mem_2_io_data_write_data_T_11 = bits(data_mem_2.io.data_read.data, 127, 64) @[test.scala 193:250]
              node _data_mem_2_io_data_write_data_T_12 = or(part_2[0], part_2[1]) @[test.scala 193:291]
              node _data_mem_2_io_data_write_data_T_13 = or(_data_mem_2_io_data_write_data_T_12, part_2[2]) @[test.scala 193:291]
              node _data_mem_2_io_data_write_data_T_14 = or(_data_mem_2_io_data_write_data_T_13, part_2[3]) @[test.scala 193:291]
              node _data_mem_2_io_data_write_data_T_15 = or(_data_mem_2_io_data_write_data_T_14, part_2[4]) @[test.scala 193:291]
              node _data_mem_2_io_data_write_data_T_16 = or(_data_mem_2_io_data_write_data_T_15, part_2[5]) @[test.scala 193:291]
              node _data_mem_2_io_data_write_data_T_17 = or(_data_mem_2_io_data_write_data_T_16, part_2[6]) @[test.scala 193:291]
              node _data_mem_2_io_data_write_data_T_18 = or(_data_mem_2_io_data_write_data_T_17, part_2[7]) @[test.scala 193:291]
              node _data_mem_2_io_data_write_data_T_19 = cat(_data_mem_2_io_data_write_data_T_11, _data_mem_2_io_data_write_data_T_18) @[Cat.scala 31:58]
              node _data_mem_2_io_data_write_data_T_20 = mux(_data_mem_2_io_data_write_data_T_1, _data_mem_2_io_data_write_data_T_10, _data_mem_2_io_data_write_data_T_19) @[test.scala 193:94]
              data_mem_2.io.data_write.data <= _data_mem_2_io_data_write_data_T_20 @[test.scala 193:88]
            when is_match[3] : @[test.scala 179:66]
              data_mem_3.io.cache_req.we <= UInt<1>("h1") @[test.scala 181:85]
              tag_mem_3.io.tag_write.valid <= UInt<1>("h1") @[test.scala 182:87]
              tag_mem_3.io.tag_write.dirty <= UInt<1>("h1") @[test.scala 183:87]
              node _tag_mem_3_io_tag_write_tag_T = bits(io.cpu_request.addr, 63, 9) @[test.scala 184:107]
              tag_mem_3.io.tag_write.tag <= _tag_mem_3_io_tag_write_tag_T @[test.scala 184:85]
              wire part_3 : UInt<64>[8] @[test.scala 186:72]
              node _part_0_T_18 = bits(io.cpu_request.mask, 0, 0) @[test.scala 188:99]
              node _part_0_T_19 = bits(io.cpu_request.data, 7, 0) @[test.scala 188:123]
              node _part_0_T_20 = shl(_part_0_T_19, 0) @[test.scala 188:140]
              node _part_0_T_21 = bits(data_mem_3.io.data_read.data, 7, 0) @[test.scala 188:179]
              node _part_0_T_22 = shl(_part_0_T_21, 0) @[test.scala 188:200]
              node _part_0_T_23 = mux(_part_0_T_18, _part_0_T_20, _part_0_T_22) @[test.scala 188:79]
              part_3[0] <= _part_0_T_23 @[test.scala 188:73]
              node _part_1_T_18 = bits(io.cpu_request.mask, 1, 1) @[test.scala 188:99]
              node _part_1_T_19 = bits(io.cpu_request.data, 15, 8) @[test.scala 188:123]
              node _part_1_T_20 = shl(_part_1_T_19, 8) @[test.scala 188:140]
              node _part_1_T_21 = bits(data_mem_3.io.data_read.data, 15, 8) @[test.scala 188:179]
              node _part_1_T_22 = shl(_part_1_T_21, 8) @[test.scala 188:200]
              node _part_1_T_23 = mux(_part_1_T_18, _part_1_T_20, _part_1_T_22) @[test.scala 188:79]
              part_3[1] <= _part_1_T_23 @[test.scala 188:73]
              node _part_2_T_18 = bits(io.cpu_request.mask, 2, 2) @[test.scala 188:99]
              node _part_2_T_19 = bits(io.cpu_request.data, 23, 16) @[test.scala 188:123]
              node _part_2_T_20 = shl(_part_2_T_19, 16) @[test.scala 188:140]
              node _part_2_T_21 = bits(data_mem_3.io.data_read.data, 23, 16) @[test.scala 188:179]
              node _part_2_T_22 = shl(_part_2_T_21, 16) @[test.scala 188:200]
              node _part_2_T_23 = mux(_part_2_T_18, _part_2_T_20, _part_2_T_22) @[test.scala 188:79]
              part_3[2] <= _part_2_T_23 @[test.scala 188:73]
              node _part_3_T_18 = bits(io.cpu_request.mask, 3, 3) @[test.scala 188:99]
              node _part_3_T_19 = bits(io.cpu_request.data, 31, 24) @[test.scala 188:123]
              node _part_3_T_20 = shl(_part_3_T_19, 24) @[test.scala 188:140]
              node _part_3_T_21 = bits(data_mem_3.io.data_read.data, 31, 24) @[test.scala 188:179]
              node _part_3_T_22 = shl(_part_3_T_21, 24) @[test.scala 188:200]
              node _part_3_T_23 = mux(_part_3_T_18, _part_3_T_20, _part_3_T_22) @[test.scala 188:79]
              part_3[3] <= _part_3_T_23 @[test.scala 188:73]
              node _part_4_T_18 = bits(io.cpu_request.mask, 4, 4) @[test.scala 188:99]
              node _part_4_T_19 = bits(io.cpu_request.data, 39, 32) @[test.scala 188:123]
              node _part_4_T_20 = shl(_part_4_T_19, 32) @[test.scala 188:140]
              node _part_4_T_21 = bits(data_mem_3.io.data_read.data, 39, 32) @[test.scala 188:179]
              node _part_4_T_22 = shl(_part_4_T_21, 32) @[test.scala 188:200]
              node _part_4_T_23 = mux(_part_4_T_18, _part_4_T_20, _part_4_T_22) @[test.scala 188:79]
              part_3[4] <= _part_4_T_23 @[test.scala 188:73]
              node _part_5_T_18 = bits(io.cpu_request.mask, 5, 5) @[test.scala 188:99]
              node _part_5_T_19 = bits(io.cpu_request.data, 47, 40) @[test.scala 188:123]
              node _part_5_T_20 = shl(_part_5_T_19, 40) @[test.scala 188:140]
              node _part_5_T_21 = bits(data_mem_3.io.data_read.data, 47, 40) @[test.scala 188:179]
              node _part_5_T_22 = shl(_part_5_T_21, 40) @[test.scala 188:200]
              node _part_5_T_23 = mux(_part_5_T_18, _part_5_T_20, _part_5_T_22) @[test.scala 188:79]
              part_3[5] <= _part_5_T_23 @[test.scala 188:73]
              node _part_6_T_18 = bits(io.cpu_request.mask, 6, 6) @[test.scala 188:99]
              node _part_6_T_19 = bits(io.cpu_request.data, 55, 48) @[test.scala 188:123]
              node _part_6_T_20 = shl(_part_6_T_19, 48) @[test.scala 188:140]
              node _part_6_T_21 = bits(data_mem_3.io.data_read.data, 55, 48) @[test.scala 188:179]
              node _part_6_T_22 = shl(_part_6_T_21, 48) @[test.scala 188:200]
              node _part_6_T_23 = mux(_part_6_T_18, _part_6_T_20, _part_6_T_22) @[test.scala 188:79]
              part_3[6] <= _part_6_T_23 @[test.scala 188:73]
              node _part_7_T_18 = bits(io.cpu_request.mask, 7, 7) @[test.scala 188:99]
              node _part_7_T_19 = bits(io.cpu_request.data, 63, 56) @[test.scala 188:123]
              node _part_7_T_20 = shl(_part_7_T_19, 56) @[test.scala 188:140]
              node _part_7_T_21 = bits(data_mem_3.io.data_read.data, 63, 56) @[test.scala 188:179]
              node _part_7_T_22 = shl(_part_7_T_21, 56) @[test.scala 188:200]
              node _part_7_T_23 = mux(_part_7_T_18, _part_7_T_20, _part_7_T_22) @[test.scala 188:79]
              part_3[7] <= _part_7_T_23 @[test.scala 188:73]
              node _data_mem_3_io_data_write_data_T = bits(io.cpu_request.addr, 6, 0) @[test.scala 193:114]
              node _data_mem_3_io_data_write_data_T_1 = eq(_data_mem_3_io_data_write_data_T, UInt<1>("h0")) @[test.scala 193:137]
              node _data_mem_3_io_data_write_data_T_2 = or(part_3[0], part_3[1]) @[test.scala 193:164]
              node _data_mem_3_io_data_write_data_T_3 = or(_data_mem_3_io_data_write_data_T_2, part_3[2]) @[test.scala 193:164]
              node _data_mem_3_io_data_write_data_T_4 = or(_data_mem_3_io_data_write_data_T_3, part_3[3]) @[test.scala 193:164]
              node _data_mem_3_io_data_write_data_T_5 = or(_data_mem_3_io_data_write_data_T_4, part_3[4]) @[test.scala 193:164]
              node _data_mem_3_io_data_write_data_T_6 = or(_data_mem_3_io_data_write_data_T_5, part_3[5]) @[test.scala 193:164]
              node _data_mem_3_io_data_write_data_T_7 = or(_data_mem_3_io_data_write_data_T_6, part_3[6]) @[test.scala 193:164]
              node _data_mem_3_io_data_write_data_T_8 = or(_data_mem_3_io_data_write_data_T_7, part_3[7]) @[test.scala 193:164]
              node _data_mem_3_io_data_write_data_T_9 = bits(data_mem_3.io.data_read.data, 63, 0) @[test.scala 193:199]
              node _data_mem_3_io_data_write_data_T_10 = cat(_data_mem_3_io_data_write_data_T_8, _data_mem_3_io_data_write_data_T_9) @[Cat.scala 31:58]
              node _data_mem_3_io_data_write_data_T_11 = bits(data_mem_3.io.data_read.data, 127, 64) @[test.scala 193:250]
              node _data_mem_3_io_data_write_data_T_12 = or(part_3[0], part_3[1]) @[test.scala 193:291]
              node _data_mem_3_io_data_write_data_T_13 = or(_data_mem_3_io_data_write_data_T_12, part_3[2]) @[test.scala 193:291]
              node _data_mem_3_io_data_write_data_T_14 = or(_data_mem_3_io_data_write_data_T_13, part_3[3]) @[test.scala 193:291]
              node _data_mem_3_io_data_write_data_T_15 = or(_data_mem_3_io_data_write_data_T_14, part_3[4]) @[test.scala 193:291]
              node _data_mem_3_io_data_write_data_T_16 = or(_data_mem_3_io_data_write_data_T_15, part_3[5]) @[test.scala 193:291]
              node _data_mem_3_io_data_write_data_T_17 = or(_data_mem_3_io_data_write_data_T_16, part_3[6]) @[test.scala 193:291]
              node _data_mem_3_io_data_write_data_T_18 = or(_data_mem_3_io_data_write_data_T_17, part_3[7]) @[test.scala 193:291]
              node _data_mem_3_io_data_write_data_T_19 = cat(_data_mem_3_io_data_write_data_T_11, _data_mem_3_io_data_write_data_T_18) @[Cat.scala 31:58]
              node _data_mem_3_io_data_write_data_T_20 = mux(_data_mem_3_io_data_write_data_T_1, _data_mem_3_io_data_write_data_T_10, _data_mem_3_io_data_write_data_T_19) @[test.scala 193:94]
              data_mem_3.io.data_write.data <= _data_mem_3_io_data_write_data_T_20 @[test.scala 193:88]
          next_state <= UInt<1>("h0") @[test.scala 197:44]
        else :
          wire max : UInt<2>
          max <= UInt<2>("h0")
          node _T_20 = and(tag_mem_0.io.tag_read.valid, tag_mem_1.io.tag_read.valid) @[test.scala 202:88]
          node _T_21 = and(_T_20, tag_mem_2.io.tag_read.valid) @[test.scala 202:88]
          node _T_22 = and(_T_21, tag_mem_3.io.tag_read.valid) @[test.scala 202:88]
          when _T_22 : @[test.scala 202:92]
            node compare_1_0 = gt(tag_mem_1.io.tag_read.visit, tag_mem_0.io.tag_read.visit) @[test.scala 205:68]
            node compare_2_3 = gt(tag_mem_3.io.tag_read.visit, tag_mem_2.io.tag_read.visit) @[test.scala 206:68]
            node _max_01_or_23_T = mux(compare_2_3, tag_mem_3.io.tag_read.visit, tag_mem_2.io.tag_read.visit) @[test.scala 207:63]
            node _max_01_or_23_T_1 = mux(compare_1_0, tag_mem_1.io.tag_read.visit, tag_mem_0.io.tag_read.visit) @[test.scala 207:102]
            node max_01_or_23 = gt(_max_01_or_23_T, _max_01_or_23_T_1) @[test.scala 207:97]
            node _max_T = mux(max_01_or_23, compare_2_3, compare_1_0) @[test.scala 208:69]
            node _max_T_1 = cat(max_01_or_23, _max_T) @[Cat.scala 31:58]
            max <= _max_T_1 @[test.scala 208:45]
            replace <= max @[test.scala 209:49]
          else :
            node _max_T_2 = eq(tag_mem_1.io.tag_read.valid, UInt<1>("h0")) @[test.scala 213:97]
            node _max_T_3 = eq(tag_mem_2.io.tag_read.valid, UInt<1>("h0")) @[test.scala 213:144]
            node _max_T_4 = eq(tag_mem_3.io.tag_read.valid, UInt<1>("h0")) @[test.scala 213:191]
            node _max_T_5 = mux(_max_T_4, UInt<2>("h3"), UInt<1>("h0")) @[Mux.scala 101:16]
            node _max_T_6 = mux(_max_T_3, UInt<2>("h2"), _max_T_5) @[Mux.scala 101:16]
            node _max_T_7 = mux(_max_T_2, UInt<1>("h1"), _max_T_6) @[Mux.scala 101:16]
            max <= _max_T_7 @[test.scala 213:45]
          node _T_23 = eq(UInt<1>("h0"), max) @[test.scala 218:50]
          when _T_23 : @[test.scala 218:58]
            tag_mem_0.io.cache_req.we <= UInt<1>("h1") @[test.scala 219:76]
            tag_mem_0.io.tag_write.valid <= UInt<1>("h1") @[test.scala 220:79]
            tag_mem_0.io.tag_write.dirty <= io.cpu_request.rw @[test.scala 221:79]
            node _tag_mem_0_io_tag_write_tag_T_1 = bits(io.cpu_request.addr, 63, 9) @[test.scala 222:99]
            tag_mem_0.io.tag_write.tag <= _tag_mem_0_io_tag_write_tag_T_1 @[test.scala 222:77]
            tag_mem_0.io.tag_write.visit <= UInt<1>("h0") @[test.scala 223:79]
            node _refill_addr_T = not(UInt<6>("h3f")) @[test.scala 227:87]
            node _refill_addr_T_1 = and(io.cpu_request.addr, _refill_addr_T) @[test.scala 227:84]
            refill_addr <= _refill_addr_T_1 @[test.scala 227:61]
            node _T_24 = eq(tag_mem_0.io.tag_read.dirty, UInt<1>("h0")) @[test.scala 228:87]
            node _T_25 = or(tag_mem_0.io.tag_read.valid, _T_24) @[test.scala 228:83]
            when _T_25 : @[test.scala 228:118]
              next_state <= UInt<2>("h3") @[test.scala 229:68]
            else :
              node writeback_addr_hi = cat(tag_mem_0.io.tag_read.tag, max) @[Cat.scala 31:58]
              node _writeback_addr_T = cat(writeback_addr_hi, UInt<7>("h0")) @[Cat.scala 31:58]
              writeback_addr <= _writeback_addr_T @[test.scala 234:72]
              next_state <= UInt<2>("h2") @[test.scala 235:68]
          node _T_26 = eq(UInt<1>("h1"), max) @[test.scala 218:50]
          when _T_26 : @[test.scala 218:58]
            tag_mem_1.io.cache_req.we <= UInt<1>("h1") @[test.scala 219:76]
            tag_mem_1.io.tag_write.valid <= UInt<1>("h1") @[test.scala 220:79]
            tag_mem_1.io.tag_write.dirty <= io.cpu_request.rw @[test.scala 221:79]
            node _tag_mem_1_io_tag_write_tag_T_1 = bits(io.cpu_request.addr, 63, 9) @[test.scala 222:99]
            tag_mem_1.io.tag_write.tag <= _tag_mem_1_io_tag_write_tag_T_1 @[test.scala 222:77]
            tag_mem_1.io.tag_write.visit <= UInt<1>("h0") @[test.scala 223:79]
            node _refill_addr_T_2 = not(UInt<6>("h3f")) @[test.scala 227:87]
            node _refill_addr_T_3 = and(io.cpu_request.addr, _refill_addr_T_2) @[test.scala 227:84]
            refill_addr <= _refill_addr_T_3 @[test.scala 227:61]
            node _T_27 = eq(tag_mem_1.io.tag_read.dirty, UInt<1>("h0")) @[test.scala 228:87]
            node _T_28 = or(tag_mem_1.io.tag_read.valid, _T_27) @[test.scala 228:83]
            when _T_28 : @[test.scala 228:118]
              next_state <= UInt<2>("h3") @[test.scala 229:68]
            else :
              node writeback_addr_hi_1 = cat(tag_mem_1.io.tag_read.tag, max) @[Cat.scala 31:58]
              node _writeback_addr_T_1 = cat(writeback_addr_hi_1, UInt<7>("h0")) @[Cat.scala 31:58]
              writeback_addr <= _writeback_addr_T_1 @[test.scala 234:72]
              next_state <= UInt<2>("h2") @[test.scala 235:68]
          node _T_29 = eq(UInt<2>("h2"), max) @[test.scala 218:50]
          when _T_29 : @[test.scala 218:58]
            tag_mem_2.io.cache_req.we <= UInt<1>("h1") @[test.scala 219:76]
            tag_mem_2.io.tag_write.valid <= UInt<1>("h1") @[test.scala 220:79]
            tag_mem_2.io.tag_write.dirty <= io.cpu_request.rw @[test.scala 221:79]
            node _tag_mem_2_io_tag_write_tag_T_1 = bits(io.cpu_request.addr, 63, 9) @[test.scala 222:99]
            tag_mem_2.io.tag_write.tag <= _tag_mem_2_io_tag_write_tag_T_1 @[test.scala 222:77]
            tag_mem_2.io.tag_write.visit <= UInt<1>("h0") @[test.scala 223:79]
            node _refill_addr_T_4 = not(UInt<6>("h3f")) @[test.scala 227:87]
            node _refill_addr_T_5 = and(io.cpu_request.addr, _refill_addr_T_4) @[test.scala 227:84]
            refill_addr <= _refill_addr_T_5 @[test.scala 227:61]
            node _T_30 = eq(tag_mem_2.io.tag_read.dirty, UInt<1>("h0")) @[test.scala 228:87]
            node _T_31 = or(tag_mem_2.io.tag_read.valid, _T_30) @[test.scala 228:83]
            when _T_31 : @[test.scala 228:118]
              next_state <= UInt<2>("h3") @[test.scala 229:68]
            else :
              node writeback_addr_hi_2 = cat(tag_mem_2.io.tag_read.tag, max) @[Cat.scala 31:58]
              node _writeback_addr_T_2 = cat(writeback_addr_hi_2, UInt<7>("h0")) @[Cat.scala 31:58]
              writeback_addr <= _writeback_addr_T_2 @[test.scala 234:72]
              next_state <= UInt<2>("h2") @[test.scala 235:68]
          node _T_32 = eq(UInt<2>("h3"), max) @[test.scala 218:50]
          when _T_32 : @[test.scala 218:58]
            tag_mem_3.io.cache_req.we <= UInt<1>("h1") @[test.scala 219:76]
            tag_mem_3.io.tag_write.valid <= UInt<1>("h1") @[test.scala 220:79]
            tag_mem_3.io.tag_write.dirty <= io.cpu_request.rw @[test.scala 221:79]
            node _tag_mem_3_io_tag_write_tag_T_1 = bits(io.cpu_request.addr, 63, 9) @[test.scala 222:99]
            tag_mem_3.io.tag_write.tag <= _tag_mem_3_io_tag_write_tag_T_1 @[test.scala 222:77]
            tag_mem_3.io.tag_write.visit <= UInt<1>("h0") @[test.scala 223:79]
            node _refill_addr_T_6 = not(UInt<6>("h3f")) @[test.scala 227:87]
            node _refill_addr_T_7 = and(io.cpu_request.addr, _refill_addr_T_6) @[test.scala 227:84]
            refill_addr <= _refill_addr_T_7 @[test.scala 227:61]
            node _T_33 = eq(tag_mem_3.io.tag_read.dirty, UInt<1>("h0")) @[test.scala 228:87]
            node _T_34 = or(tag_mem_3.io.tag_read.valid, _T_33) @[test.scala 228:83]
            when _T_34 : @[test.scala 228:118]
              next_state <= UInt<2>("h3") @[test.scala 229:68]
            else :
              node writeback_addr_hi_3 = cat(tag_mem_3.io.tag_read.tag, max) @[Cat.scala 31:58]
              node _writeback_addr_T_3 = cat(writeback_addr_hi_3, UInt<7>("h0")) @[Cat.scala 31:58]
              writeback_addr <= _writeback_addr_T_3 @[test.scala 234:72]
              next_state <= UInt<2>("h2") @[test.scala 235:68]
        node _T_35 = eq(is_match[0], UInt<1>("h0")) @[test.scala 243:38]
        node _T_36 = and(_T_35, tag_mem_0.io.tag_read.valid) @[test.scala 243:51]
        when _T_36 : @[test.scala 243:83]
          tag_mem_0.io.tag_write.valid <= UInt<1>("h1") @[test.scala 244:71]
          tag_mem_0.io.tag_write.dirty <= tag_mem_0.io.tag_read.dirty @[test.scala 245:71]
          node _tag_mem_0_io_tag_write_visit_T = not(tag_mem_0.io.tag_read.visit) @[test.scala 246:79]
          node _tag_mem_0_io_tag_write_visit_T_1 = eq(_tag_mem_0_io_tag_write_visit_T, UInt<1>("h0")) @[test.scala 246:110]
          node _tag_mem_0_io_tag_write_visit_T_2 = add(tag_mem_0.io.tag_read.visit, UInt<1>("h1")) @[test.scala 246:178]
          node _tag_mem_0_io_tag_write_visit_T_3 = tail(_tag_mem_0_io_tag_write_visit_T_2, 1) @[test.scala 246:178]
          node _tag_mem_0_io_tag_write_visit_T_4 = mux(_tag_mem_0_io_tag_write_visit_T_1, tag_mem_0.io.tag_read.visit, _tag_mem_0_io_tag_write_visit_T_3) @[test.scala 246:77]
          tag_mem_0.io.tag_write.visit <= _tag_mem_0_io_tag_write_visit_T_4 @[test.scala 246:71]
          tag_mem_0.io.tag_write.tag <= tag_mem_0.io.tag_read.tag @[test.scala 247:69]
        node _T_37 = eq(is_match[1], UInt<1>("h0")) @[test.scala 243:38]
        node _T_38 = and(_T_37, tag_mem_1.io.tag_read.valid) @[test.scala 243:51]
        when _T_38 : @[test.scala 243:83]
          tag_mem_1.io.tag_write.valid <= UInt<1>("h1") @[test.scala 244:71]
          tag_mem_1.io.tag_write.dirty <= tag_mem_1.io.tag_read.dirty @[test.scala 245:71]
          node _tag_mem_1_io_tag_write_visit_T = not(tag_mem_1.io.tag_read.visit) @[test.scala 246:79]
          node _tag_mem_1_io_tag_write_visit_T_1 = eq(_tag_mem_1_io_tag_write_visit_T, UInt<1>("h0")) @[test.scala 246:110]
          node _tag_mem_1_io_tag_write_visit_T_2 = add(tag_mem_1.io.tag_read.visit, UInt<1>("h1")) @[test.scala 246:178]
          node _tag_mem_1_io_tag_write_visit_T_3 = tail(_tag_mem_1_io_tag_write_visit_T_2, 1) @[test.scala 246:178]
          node _tag_mem_1_io_tag_write_visit_T_4 = mux(_tag_mem_1_io_tag_write_visit_T_1, tag_mem_1.io.tag_read.visit, _tag_mem_1_io_tag_write_visit_T_3) @[test.scala 246:77]
          tag_mem_1.io.tag_write.visit <= _tag_mem_1_io_tag_write_visit_T_4 @[test.scala 246:71]
          tag_mem_1.io.tag_write.tag <= tag_mem_1.io.tag_read.tag @[test.scala 247:69]
        node _T_39 = eq(is_match[2], UInt<1>("h0")) @[test.scala 243:38]
        node _T_40 = and(_T_39, tag_mem_2.io.tag_read.valid) @[test.scala 243:51]
        when _T_40 : @[test.scala 243:83]
          tag_mem_2.io.tag_write.valid <= UInt<1>("h1") @[test.scala 244:71]
          tag_mem_2.io.tag_write.dirty <= tag_mem_2.io.tag_read.dirty @[test.scala 245:71]
          node _tag_mem_2_io_tag_write_visit_T = not(tag_mem_2.io.tag_read.visit) @[test.scala 246:79]
          node _tag_mem_2_io_tag_write_visit_T_1 = eq(_tag_mem_2_io_tag_write_visit_T, UInt<1>("h0")) @[test.scala 246:110]
          node _tag_mem_2_io_tag_write_visit_T_2 = add(tag_mem_2.io.tag_read.visit, UInt<1>("h1")) @[test.scala 246:178]
          node _tag_mem_2_io_tag_write_visit_T_3 = tail(_tag_mem_2_io_tag_write_visit_T_2, 1) @[test.scala 246:178]
          node _tag_mem_2_io_tag_write_visit_T_4 = mux(_tag_mem_2_io_tag_write_visit_T_1, tag_mem_2.io.tag_read.visit, _tag_mem_2_io_tag_write_visit_T_3) @[test.scala 246:77]
          tag_mem_2.io.tag_write.visit <= _tag_mem_2_io_tag_write_visit_T_4 @[test.scala 246:71]
          tag_mem_2.io.tag_write.tag <= tag_mem_2.io.tag_read.tag @[test.scala 247:69]
        node _T_41 = eq(is_match[3], UInt<1>("h0")) @[test.scala 243:38]
        node _T_42 = and(_T_41, tag_mem_3.io.tag_read.valid) @[test.scala 243:51]
        when _T_42 : @[test.scala 243:83]
          tag_mem_3.io.tag_write.valid <= UInt<1>("h1") @[test.scala 244:71]
          tag_mem_3.io.tag_write.dirty <= tag_mem_3.io.tag_read.dirty @[test.scala 245:71]
          node _tag_mem_3_io_tag_write_visit_T = not(tag_mem_3.io.tag_read.visit) @[test.scala 246:79]
          node _tag_mem_3_io_tag_write_visit_T_1 = eq(_tag_mem_3_io_tag_write_visit_T, UInt<1>("h0")) @[test.scala 246:110]
          node _tag_mem_3_io_tag_write_visit_T_2 = add(tag_mem_3.io.tag_read.visit, UInt<1>("h1")) @[test.scala 246:178]
          node _tag_mem_3_io_tag_write_visit_T_3 = tail(_tag_mem_3_io_tag_write_visit_T_2, 1) @[test.scala 246:178]
          node _tag_mem_3_io_tag_write_visit_T_4 = mux(_tag_mem_3_io_tag_write_visit_T_1, tag_mem_3.io.tag_read.visit, _tag_mem_3_io_tag_write_visit_T_3) @[test.scala 246:77]
          tag_mem_3.io.tag_write.visit <= _tag_mem_3_io_tag_write_visit_T_4 @[test.scala 246:71]
          tag_mem_3.io.tag_write.tag <= tag_mem_3.io.tag_read.tag @[test.scala 247:69]
      else :
        node _T_43 = asUInt(UInt<2>("h3")) @[test.scala 160:28]
        node _T_44 = asUInt(cache_state) @[test.scala 160:28]
        node _T_45 = eq(_T_43, _T_44) @[test.scala 160:28]
        when _T_45 : @[test.scala 160:28]
          when io.mem_response.ready : @[test.scala 253:52]
            node _T_46 = eq(UInt<1>("h0"), replace) @[test.scala 256:50]
            when _T_46 : @[test.scala 257:41]
              node _data_mem_0_io_data_write_data_T_21 = dshl(index, UInt<3>("h6")) @[test.scala 258:145]
              node _data_mem_0_io_data_write_data_T_22 = dshl(UInt<6>("h3f"), _data_mem_0_io_data_write_data_T_21) @[test.scala 258:135]
              node _data_mem_0_io_data_write_data_T_23 = not(_data_mem_0_io_data_write_data_T_22) @[test.scala 258:116]
              node _data_mem_0_io_data_write_data_T_24 = and(data_mem_0.io.data_read.data, _data_mem_0_io_data_write_data_T_23) @[test.scala 258:113]
              node _data_mem_0_io_data_write_data_T_25 = dshl(index, UInt<3>("h6")) @[test.scala 258:189]
              node _data_mem_0_io_data_write_data_T_26 = dshl(io.mem_response.data, _data_mem_0_io_data_write_data_T_25) @[test.scala 258:179]
              node _data_mem_0_io_data_write_data_T_27 = or(_data_mem_0_io_data_write_data_T_24, _data_mem_0_io_data_write_data_T_26) @[test.scala 258:155]
              data_mem_0.io.data_write.data <= _data_mem_0_io_data_write_data_T_27 @[test.scala 258:80]
              data_mem_0.io.cache_req.we <= UInt<1>("h1") @[test.scala 259:77]
            node _T_47 = eq(UInt<1>("h1"), replace) @[test.scala 256:50]
            when _T_47 : @[test.scala 257:41]
              node _data_mem_1_io_data_write_data_T_21 = dshl(index, UInt<3>("h6")) @[test.scala 258:145]
              node _data_mem_1_io_data_write_data_T_22 = dshl(UInt<6>("h3f"), _data_mem_1_io_data_write_data_T_21) @[test.scala 258:135]
              node _data_mem_1_io_data_write_data_T_23 = not(_data_mem_1_io_data_write_data_T_22) @[test.scala 258:116]
              node _data_mem_1_io_data_write_data_T_24 = and(data_mem_1.io.data_read.data, _data_mem_1_io_data_write_data_T_23) @[test.scala 258:113]
              node _data_mem_1_io_data_write_data_T_25 = dshl(index, UInt<3>("h6")) @[test.scala 258:189]
              node _data_mem_1_io_data_write_data_T_26 = dshl(io.mem_response.data, _data_mem_1_io_data_write_data_T_25) @[test.scala 258:179]
              node _data_mem_1_io_data_write_data_T_27 = or(_data_mem_1_io_data_write_data_T_24, _data_mem_1_io_data_write_data_T_26) @[test.scala 258:155]
              data_mem_1.io.data_write.data <= _data_mem_1_io_data_write_data_T_27 @[test.scala 258:80]
              data_mem_1.io.cache_req.we <= UInt<1>("h1") @[test.scala 259:77]
            node _T_48 = eq(UInt<2>("h2"), replace) @[test.scala 256:50]
            when _T_48 : @[test.scala 257:41]
              node _data_mem_2_io_data_write_data_T_21 = dshl(index, UInt<3>("h6")) @[test.scala 258:145]
              node _data_mem_2_io_data_write_data_T_22 = dshl(UInt<6>("h3f"), _data_mem_2_io_data_write_data_T_21) @[test.scala 258:135]
              node _data_mem_2_io_data_write_data_T_23 = not(_data_mem_2_io_data_write_data_T_22) @[test.scala 258:116]
              node _data_mem_2_io_data_write_data_T_24 = and(data_mem_2.io.data_read.data, _data_mem_2_io_data_write_data_T_23) @[test.scala 258:113]
              node _data_mem_2_io_data_write_data_T_25 = dshl(index, UInt<3>("h6")) @[test.scala 258:189]
              node _data_mem_2_io_data_write_data_T_26 = dshl(io.mem_response.data, _data_mem_2_io_data_write_data_T_25) @[test.scala 258:179]
              node _data_mem_2_io_data_write_data_T_27 = or(_data_mem_2_io_data_write_data_T_24, _data_mem_2_io_data_write_data_T_26) @[test.scala 258:155]
              data_mem_2.io.data_write.data <= _data_mem_2_io_data_write_data_T_27 @[test.scala 258:80]
              data_mem_2.io.cache_req.we <= UInt<1>("h1") @[test.scala 259:77]
            node _T_49 = eq(UInt<2>("h3"), replace) @[test.scala 256:50]
            when _T_49 : @[test.scala 257:41]
              node _data_mem_3_io_data_write_data_T_21 = dshl(index, UInt<3>("h6")) @[test.scala 258:145]
              node _data_mem_3_io_data_write_data_T_22 = dshl(UInt<6>("h3f"), _data_mem_3_io_data_write_data_T_21) @[test.scala 258:135]
              node _data_mem_3_io_data_write_data_T_23 = not(_data_mem_3_io_data_write_data_T_22) @[test.scala 258:116]
              node _data_mem_3_io_data_write_data_T_24 = and(data_mem_3.io.data_read.data, _data_mem_3_io_data_write_data_T_23) @[test.scala 258:113]
              node _data_mem_3_io_data_write_data_T_25 = dshl(index, UInt<3>("h6")) @[test.scala 258:189]
              node _data_mem_3_io_data_write_data_T_26 = dshl(io.mem_response.data, _data_mem_3_io_data_write_data_T_25) @[test.scala 258:179]
              node _data_mem_3_io_data_write_data_T_27 = or(_data_mem_3_io_data_write_data_T_24, _data_mem_3_io_data_write_data_T_26) @[test.scala 258:155]
              data_mem_3.io.data_write.data <= _data_mem_3_io_data_write_data_T_27 @[test.scala 258:80]
              data_mem_3.io.cache_req.we <= UInt<1>("h1") @[test.scala 259:77]
          fill_block_en <= io.mem_response.ready @[test.scala 265:39]
          when warp_out : @[test.scala 267:39]
            next_state <= UInt<1>("h1") @[test.scala 268:44]
            index <= UInt<1>("h0") @[test.scala 269:39]
          else :
            io.mem_request.valid <= UInt<1>("h1") @[test.scala 271:54]
            node _io_mem_request_addr_T = dshl(index, UInt<3>("h6")) @[test.scala 272:78]
            node _io_mem_request_addr_T_1 = add(refill_addr, _io_mem_request_addr_T) @[test.scala 272:69]
            node _io_mem_request_addr_T_2 = tail(_io_mem_request_addr_T_1, 1) @[test.scala 272:69]
            io.mem_request.addr <= _io_mem_request_addr_T_2 @[test.scala 272:53]
            io.mem_request.rw <= UInt<1>("h0") @[test.scala 273:51]
            next_state <= UInt<2>("h3") @[test.scala 274:44]
        else :
          node _T_50 = asUInt(UInt<2>("h2")) @[test.scala 160:28]
          node _T_51 = asUInt(cache_state) @[test.scala 160:28]
          node _T_52 = eq(_T_50, _T_51) @[test.scala 160:28]
          when _T_52 : @[test.scala 160:28]
            fill_block_en <= io.mem_response.ready @[test.scala 293:39]
            when warp_out : @[test.scala 294:39]
              next_state <= UInt<2>("h3") @[test.scala 295:44]
              index <= UInt<1>("h0") @[test.scala 296:39]
            else :
              io.mem_request.valid <= UInt<1>("h1") @[test.scala 298:54]
              node _io_mem_request_addr_T_3 = dshl(index, UInt<3>("h6")) @[test.scala 299:80]
              node _io_mem_request_addr_T_4 = add(writeback_addr, _io_mem_request_addr_T_3) @[test.scala 299:71]
              node _io_mem_request_addr_T_5 = tail(_io_mem_request_addr_T_4, 1) @[test.scala 299:71]
              io.mem_request.addr <= _io_mem_request_addr_T_5 @[test.scala 299:53]
              node _T_53 = eq(UInt<1>("h0"), replace) @[test.scala 302:50]
              when _T_53 : @[test.scala 302:62]
                node _io_mem_request_data_T = eq(index, UInt<1>("h0")) @[test.scala 303:82]
                node _io_mem_request_data_T_1 = bits(data_mem_0.io.data_read.data, 127, 64) @[test.scala 303:120]
                node _io_mem_request_data_T_2 = bits(data_mem_0.io.data_read.data, 63, 0) @[test.scala 303:176]
                node _io_mem_request_data_T_3 = mux(_io_mem_request_data_T, _io_mem_request_data_T_1, _io_mem_request_data_T_2) @[test.scala 303:75]
                io.mem_request.data <= _io_mem_request_data_T_3 @[test.scala 303:69]
              node _T_54 = eq(UInt<1>("h1"), replace) @[test.scala 302:50]
              when _T_54 : @[test.scala 302:62]
                node _io_mem_request_data_T_4 = eq(index, UInt<1>("h0")) @[test.scala 303:82]
                node _io_mem_request_data_T_5 = bits(data_mem_1.io.data_read.data, 127, 64) @[test.scala 303:120]
                node _io_mem_request_data_T_6 = bits(data_mem_1.io.data_read.data, 63, 0) @[test.scala 303:176]
                node _io_mem_request_data_T_7 = mux(_io_mem_request_data_T_4, _io_mem_request_data_T_5, _io_mem_request_data_T_6) @[test.scala 303:75]
                io.mem_request.data <= _io_mem_request_data_T_7 @[test.scala 303:69]
              node _T_55 = eq(UInt<2>("h2"), replace) @[test.scala 302:50]
              when _T_55 : @[test.scala 302:62]
                node _io_mem_request_data_T_8 = eq(index, UInt<1>("h0")) @[test.scala 303:82]
                node _io_mem_request_data_T_9 = bits(data_mem_2.io.data_read.data, 127, 64) @[test.scala 303:120]
                node _io_mem_request_data_T_10 = bits(data_mem_2.io.data_read.data, 63, 0) @[test.scala 303:176]
                node _io_mem_request_data_T_11 = mux(_io_mem_request_data_T_8, _io_mem_request_data_T_9, _io_mem_request_data_T_10) @[test.scala 303:75]
                io.mem_request.data <= _io_mem_request_data_T_11 @[test.scala 303:69]
              node _T_56 = eq(UInt<2>("h3"), replace) @[test.scala 302:50]
              when _T_56 : @[test.scala 302:62]
                node _io_mem_request_data_T_12 = eq(index, UInt<1>("h0")) @[test.scala 303:82]
                node _io_mem_request_data_T_13 = bits(data_mem_3.io.data_read.data, 127, 64) @[test.scala 303:120]
                node _io_mem_request_data_T_14 = bits(data_mem_3.io.data_read.data, 63, 0) @[test.scala 303:176]
                node _io_mem_request_data_T_15 = mux(_io_mem_request_data_T_12, _io_mem_request_data_T_13, _io_mem_request_data_T_14) @[test.scala 303:75]
                io.mem_request.data <= _io_mem_request_data_T_15 @[test.scala 303:69]
              io.mem_request.rw <= UInt<1>("h1") @[test.scala 306:51]
              next_state <= UInt<2>("h2") @[test.scala 307:44]

